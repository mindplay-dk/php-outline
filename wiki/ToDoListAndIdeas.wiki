#labels todo
= To-do =

Things I plan on adding or changing in the near future (e.g. before first release):

 * add `{debug}` command - helper function for template developers; displays a list of all assigned template variables.

 * Add `{default}` command, e.g.: `{default $name='value'}` assigns 'value' to $name, if $name does not have a value.

Ideas for the future:

 * Apply any modifier to a block, e.g.: `{modify replace:"apples":"cake"}I love apples!{/modify}`

Ideas I'm having second thoughts about:

 * Add {section} block, e.g.: `{section head}...{/section}` captures the content within the section separately from the output of the template - that content can then be retrieved with `$outline->getSection('head')`. This command would enable a more structured way to capture partial output to be inserted (by means of code) other places than a page's main output.

 * Apply default modifiers to variable-output, e.g.:

 `raw output: {$message}, escaped output: {$message|html}`

 could instead be written as:

 `{apply html}raw output: {=$message}, escaped output: {$message}{/apply}`

 Unlike {modify}, which applies modifiers to the output, {apply} can be used to add default modifiers to all applicable template tags.

 The "=" symbol in {=$message} indicates that you want to bypass any default modifiers - in this example, _don't_ apply the html modifier.

 This is useful when reusing the same modifier a lot, particularly when you need to escape or encode lots of variables for HTML output.

 The syntax is up for discussion. Also, whether default modifiers should be applied before or after local modifiers. Probably after - so that default modifiers always run last, and can't interfere with other local modifiers.